/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TicketsImport } from './routes/tickets'
import { Route as SignupImport } from './routes/signup'
import { Route as LoginImport } from './routes/login'
import { Route as AdminImport } from './routes/admin'
import { Route as IndexImport } from './routes/index'
import { Route as TicketsIdImport } from './routes/tickets/$id'

// Create/Update Routes

const TicketsRoute = TicketsImport.update({
  id: '/tickets',
  path: '/tickets',
  getParentRoute: () => rootRoute,
} as any)

const SignupRoute = SignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AdminRoute = AdminImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TicketsIdRoute = TicketsIdImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => TicketsRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupImport
      parentRoute: typeof rootRoute
    }
    '/tickets': {
      id: '/tickets'
      path: '/tickets'
      fullPath: '/tickets'
      preLoaderRoute: typeof TicketsImport
      parentRoute: typeof rootRoute
    }
    '/tickets/$id': {
      id: '/tickets/$id'
      path: '/$id'
      fullPath: '/tickets/$id'
      preLoaderRoute: typeof TicketsIdImport
      parentRoute: typeof TicketsImport
    }
  }
}

// Create and export the route tree

interface TicketsRouteChildren {
  TicketsIdRoute: typeof TicketsIdRoute
}

const TicketsRouteChildren: TicketsRouteChildren = {
  TicketsIdRoute: TicketsIdRoute,
}

const TicketsRouteWithChildren =
  TicketsRoute._addFileChildren(TicketsRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/tickets': typeof TicketsRouteWithChildren
  '/tickets/$id': typeof TicketsIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/tickets': typeof TicketsRouteWithChildren
  '/tickets/$id': typeof TicketsIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/tickets': typeof TicketsRouteWithChildren
  '/tickets/$id': typeof TicketsIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/admin' | '/login' | '/signup' | '/tickets' | '/tickets/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/admin' | '/login' | '/signup' | '/tickets' | '/tickets/$id'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/login'
    | '/signup'
    | '/tickets'
    | '/tickets/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRoute
  LoginRoute: typeof LoginRoute
  SignupRoute: typeof SignupRoute
  TicketsRoute: typeof TicketsRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRoute,
  LoginRoute: LoginRoute,
  SignupRoute: SignupRoute,
  TicketsRoute: TicketsRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/admin",
        "/login",
        "/signup",
        "/tickets"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/admin": {
      "filePath": "admin.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/signup": {
      "filePath": "signup.tsx"
    },
    "/tickets": {
      "filePath": "tickets.tsx",
      "children": [
        "/tickets/$id"
      ]
    },
    "/tickets/$id": {
      "filePath": "tickets/$id.tsx",
      "parent": "/tickets"
    }
  }
}
ROUTE_MANIFEST_END */
